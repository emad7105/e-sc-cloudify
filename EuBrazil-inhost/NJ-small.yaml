#eSc workflow of 11 tasks deployed on 11 containers

tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.1/types.yaml
  - https://raw.githubusercontent.com/rawaqasha/e-sc-cloudify/master/esc_nodetypes.yaml

inputs:

  input-dir:
      description: >
        The dir path of the input files  
      default: '~/input'

  input-file1:
      description: >
        input file for importFile1
      default: file1.txt

  input-file2:
      description: >
        input file for importFile2
      default: file2.txt

  docker-image: 
      description: > 
        Docker image to be used for container building
      default: 'ubuntu:14.04'

  create_image:
      description: > 
        an option to create Docker images
      default: 'True'

node_types:

  docker_container:
    derived_from: cloudify.nodes.Root
    properties:
      image_name:
        type: string
        default: { get_input: docker-image } 
      container_ID:
        type: string
        default: container1

node_templates:

  host:
    type: cloudify.nodes.Compute
    properties:
      ip: localhost
      install_agent: false

  starterBlock:
    type: cloudify.nodes.ApplicationModule
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Core-LifecycleScripts/start-inhost.sh
          inputs:
            process:
              args: [NJ-basecaching]
    relationships:
      - type: cloudify.relationships.contained_in
        target: host

  container_1:
    type: docker_container
    properties:
      #image_name: dtdwd/importfile1
      container_ID: container_1
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Caching-Corescripts/container.sh
          inputs:
            process:
              args: [NJ-basecaching, get_property: [importFile1, block_Url]]
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
      - type: cloudify.relationships.depends_on
        target: starterBlock

  Java:
    type: spec_library
    properties:
      lib_name: default-jdk
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Caching-Corescripts/java-install2.sh
          inputs:
            process:
              args: [container_1, NJ-basecaching, '7']
    relationships:
      - type: cloudify.relationships.contained_in
        target: container_1

  importFile1:
    type: importfile
    properties:
      block_description: import file
      block_name: importfile1.jar
      block_category: File Management
      service_type: block
      block_Url: 'https://github.com/WorkflowCenter-Repositories/ImportFile-Task/raw/v1.0/importfile1.jar'
      Source: file1.txt
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Caching-Corescripts/task-download-multi.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container_1, get_property: [importFile1, block_Url]]
        configure:
          implementation: scripts/get-input.sh
          inputs:
            process:
             args: [NJ-basecaching, container_1, { get_input: input-dir }, { get_input: input-file1 }]
        start: 
          implementation: Caching-Corescripts/task-deploy.sh
          inputs:
            process:
             args: [NJ-basecaching, container_1, { get_input: input-file1 }]
    relationships:
      - type: cloudify.relationships.contained_in
        target: container_1
      - type: cloudify.relationships.depends_on
        target: Java

  container_2:
    type: docker_container
    properties:
      #image_name: dtdwd/clustalw1
      container_ID: container_2
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: Caching-Corescripts/container.sh
          inputs:
            process:
              args: [NJ-basecaching, get_property: [ClustalW, block_Url]]
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
      - type: cloudify.relationships.depends_on
        target: FilterDupl

  Java4:
    type: spec_library
    properties:
      lib_name: default-jdk
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Caching-Corescripts/java-install2.sh
          inputs:
            process:
              args: [container_2, NJ-basecaching, '7']
    relationships:
      - type: cloudify.relationships.contained_in
        target: container_2

  ClustalW_Lib:
    type: clustalw_lib
    properties:
      lib_name: clustalw2
      lib_URL: http://www.clustal.org/download/current/clustalw-2.1-linux-x86_64-libcppstatic.tar.gz
      lib_path: clustalw-2.1-linux-x86_64-libcppstatic
      version: 2.1
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Core-LifecycleScripts/Lib-install.sh
          inputs:
            process:
              args: [container_2, get_property: [ClustalW_Lib, lib_URL]]
    relationships:
      - type: cloudify.relationships.depends_on
        target: Java4
      - type: cloudify.relationships.contained_in
        target: container_2

  ClustalW:
    type: clustalW
    properties:
      block_description: I don't know
      block_name: clustalw1.jar
      block_category: File Management
      service_type: block
      Align: true
      Output-Type: CLUSTAL
      block_Url: 'https://github.com/WorkflowCenter-Repositories/ClustalW-Task/raw/v1.0/clustalw1.jar'
    relationships:
      - type: cloudify.relationships.contained_in
        target: container_2
      - type: cloudify.relationships.depends_on
        target: ClustalW_Lib
      - type: block_link
        target: FilterDupl
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: Core-LifecycleScripts/datacopy.sh
              inputs:
                process:
                  args: [FilterDupl/filtered-fasta-files, ClustalW/input-sequences, NJ-basecaching, container_2]        
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Caching-Corescripts/task-download-multi.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container_2, get_property: [ClustalW, block_Url]]
        configure:
          implementation: Core-LifecycleScripts/containers-clean.sh
          inputs:
            process:
             args: [container_1]
        start:
          implementation: Caching-Corescripts/task-deploy.sh
          inputs:
            process:
              args: [NJ-basecaching, container_2,  get_property: [ClustalW_Lib, lib_path]]

  container3:
    type: docker_container
    properties:
      #image_name: dtdwd/mega-nj1
      container_ID: container_3
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: Caching-Corescripts/container.sh
          inputs:
            process:
              args: [NJ-basecaching, get_property: [Mega-NJ, block_Url]]
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
      - type: cloudify.relationships.depends_on
        target: ClustalW

  Java5:
    type: spec_library
    properties:
      lib_name: default-jdk
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Caching-Corescripts/java-install2.sh
          inputs:
            process:
              args: [container_3, NJ-basecaching, '7']
    relationships:
      - type: cloudify.relationships.contained_in
        target: container_3

  Wine:
    type: spec_library
    properties:
      lib_name: wine
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/wine-install.sh
          inputs:
            process:
              args: [container_3]
    relationships:
      - type: cloudify.relationships.depends_on
        target: Java5
      - type: cloudify.relationships.contained_in
        target: container_3

  Mega-CC:
    type: MegaCC
    properties:
      lib_name: megacc.exe
      lib_URL: http://www.megasoftware.net/
      lib_path: Mega-CC
      version: 6.0
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Core-LifecycleScripts/Lib-install.sh
          inputs:
            process:
              args: [container_3, 'https://github.com/rawaqasha/Libs/raw/master/Mega-CC.tar.gz']
    relationships:
      - type: cloudify.relationships.depends_on
        target: Wine
      - type: cloudify.relationships.contained_in
        target: container_3

  Mega-NJ:
    type: mega-nj
    properties:
      block_description: I don't know
      block_name: mega-NJ1.jar
      block_category: File Management
      service_type: block 
      test_of_phylogeny: Bootstrap method
      no-ofbootstrapreplications: 1000
      model/method: Kimura 2-parameter model
      substitutions_to_include: 'd: Transitions + Transversions'
      rates_among_sites: Uniform rates        
      gamma_parameter: 1
      gaps/missing_data_treatment: 'Complete deletion'       
      site_coverage_cutoff(%): 95
      block_Url: https://github.com/WorkflowCenter-Repositories/Mega-NJ-Task/raw/v1.0/mega-nj1.jar
    relationships:
      - type: cloudify.relationships.contained_in
        target: container_3
      - type: cloudify.relationships.depends_on
        target: Mega-CC
      - type: cloudify.relationships.depends_on
        target: Java5
      - type: block_link
        target: ClustalW
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: Core-LifecycleScripts/datacopy.sh
              inputs:
                process:
                  args: [ClustalW/aligned-sequences, Mega-NJ/input-data, NJ-basecaching, container_3]        
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Caching-Corescripts/task-download-multi.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container_£, get_property: [Mega-NJ, block_Url]]
        configure:
          implementation: Core-LifecycleScripts/containers-clean.sh
          inputs:
            process:
             args: [container_2]
        start:
          implementation: scripts/special-deploy.sh
          inputs:
            process:
              args: [NJ-basecaching, container_3, 'Mega-CC']

  container_4:
    type: docker_container
    properties:
      #image_name: dtdwd/exportfiles1
      container_ID: container_$
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: Caching-Corescripts/container.sh
          inputs:
            process:
              args: [NJ-basecaching, get_property: [ExportFiles3, block_Url]]
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
      - type: cloudify.relationships.depends_on
        target: Mega-NJ

  Java6:
    type: spec_library
    properties:
      lib_name: default-jdk
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Caching-Corescripts/java-install2.sh
          inputs:
            process:
              args: [container_4, NJ-basecaching, '7']
    relationships:
      - type: cloudify.relationships.contained_in
        target: container_4

  ExportFiles1:
    type: exportfiles
    properties:
      block_description: export files
      block_name: exportfiles1.jar
      block_category: File Management
      service_type: block
      block_Url: 'https://github.com/WorkflowCenter-Repositories/ExportFiles-Task/raw/v1.0/exportfiles1.jar'
    relationships:
      - type: cloudify.relationships.contained_in
        target: container_4
      - type: block_link
        target: Mega-NJ
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: Core-LifecycleScripts/datacopy.sh
              inputs:
                process:
                  args: [Mega-NJ/analysis-output, ExportFiles1/file-list, NJ-basecaching, container_4]
      - type: cloudify.relationships.depends_on
        target: Java6
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Caching-Corescripts/task-download-multi.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container_4, get_property: [ExportFiles1, block_Url]]
        start: 
          implementation: Caching-Corescripts/task-deploy.sh
          inputs:
            process:
             args: [NJ-basecaching, container_4]

  container_6:
    type: docker_container
    properties:
      container_ID: container_6
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: Caching-Corescripts/container.sh
          inputs:
            process:
              args: [NJ-basecaching, get_property: [ExportFiles2, block_Url]]
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
      - type: cloudify.relationships.depends_on
        target: ExportFiles1

  Java7:
    type: spec_library
    properties:
      lib_name: default-jdk
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Caching-Corescripts/java-install2.sh
          inputs:
            process:
              args: [container_6, NJ-basecaching, '7']
    relationships:
      - type: cloudify.relationships.contained_in
        target: container_6

  ExportFiles2:
    type: exportfiles
    properties:
      block_description: export files
      block_name: exportfiles1.jar
      block_category: File Management
      service_type: block
      block_Url: 'https://github.com/WorkflowCenter-Repositories/ExportFiles-Task/raw/v1.0/exportfiles1.jar'
    relationships:
      - type: cloudify.relationships.contained_in
        target: container_6
      - type: block_link
        target: Mega-NJ
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: Core-LifecycleScripts/datacopy.sh
              inputs:
                process:
                  args: [Mega-NJ/consensus-output, ExportFiles2/file-list, NJ-basecaching, container_6]
      - type: cloudify.relationships.depends_on
        target: Java7
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: Caching-Corescripts/task-download-multi.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container_6, get_property: [ExportFiles2, block_Url]]
        start: 
          implementation: Caching-Corescripts/task-deploy.sh
          inputs:
            process:
             args: [NJ-basecaching, container_6]

  finalBlock:
    type: cloudify.nodes.ApplicationModule
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: Core-LifecycleScripts/containers-clean.sh
          inputs:
            process:
              args: [container_3, container_4, container_5, container_6]
        start:
          implementation: Core-LifecycleScripts/final-inhost.sh
          inputs:
            process:
              args: [NJ-basecaching]
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
      - type: cloudify.relationships.depends_on
        target: ExportFiles1
      - type: cloudify.relationships.depends_on
        target: ExportFiles2
